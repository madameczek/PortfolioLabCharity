@using Charity.Mvc.Controllers
@model Charity.Mvc.Models.ViewModels.LoginViewModel
@{
    ViewData["Title"] = "Login";
}

<header>
    @Html.PartialAsync("_MenuBar").Result
</header>

<section class="login-page">
    <h2>Zaloguj się</h2>
    <form asp-action="Login" method="post">
        <div class="text-danger">
            @{
                var errors = ViewData.ModelState.Where(n => n.Value.Errors.Count() > 0).ToList();
                if (errors != null)
                {
                    errors.ForEach(e => e.Value.Errors.ToList().ForEach(i => i.ErrorMessage.ToString()));
                }
            }
        </div>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <input asp-for="Email" type="email" />
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>
        <div class="form-group">
            <input asp-for="Password" type="password" />
            <span asp-validation-for="Password" class="text-danger"></span>
            <a asp-action="ResetPassword" class="btn btn--small btn--without-border reset-password">Przypomnij hasło</a>
        </div>

        <div class="form-group form-group--buttons">
            <a asp-action=@nameof(Account.Registration) class="btn btn--without-border">Załóż konto</a>
            <button class="btn" type="submit">Zaloguj się</button>
        </div>
    </form>
</section>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @{await Html.RenderPartialAsync("_BootstrapScriptsPartial");}
}